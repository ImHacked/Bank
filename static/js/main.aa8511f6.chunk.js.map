{"version":3,"sources":["Table.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["IndeterminateCheckbox","React","forwardRef","ref","indeterminate","rest","defaultRef","useRef","resolvedRef","useEffect","current","type","Fav","JSON","parse","window","localStorage","getItem","selectLen","Table","columns","data","city","INITIAL_SELECTED_ROW_IDS","console","log","useTable","initialState","selectedRowIds","usePagination","useRowSelect","hooks","visibleColumns","push","id","Header","getToggleAllPageRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","className","onClick","disabled","length","defaultValue","onChange","e","target","value","Number","style","width","App","rows","useState","setCity","a","setA","useSWR","url","axios","then","r","useMemo","accessor","for","event","name","placeholder","filter","ifsc","toString","toLowerCase","indexOf","bank_id","branch","address","district","bank_name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.aa8511f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useTable,usePagination,useRowSelect } from \"react-table\";\r\nimport './Table.css';\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\n\r\nconst Fav = JSON.parse(window.localStorage.getItem('Fav'))||{};\r\nconst selectLen=window.localStorage.getItem('changeInSelection');\r\n\r\nconsole.log(selectLen);\r\n\r\nexport default function Table({ columns, data,city }) {\r\n  const INITIAL_SELECTED_ROW_IDS = Fav[city];\r\n  console.log(INITIAL_SELECTED_ROW_IDS);\r\n  const {\r\n    getTableProps, \r\n    getTableBodyProps, \r\n    headerGroups, \r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n  \r\n    state:{pageIndex, pageSize},\r\n    \r\n    prepareRow \r\n  } = useTable({\r\n    columns,\r\n    data,\r\n    initialState: {\r\n      \r\n      selectedRowIds: INITIAL_SELECTED_ROW_IDS  || {}\r\n  }\r\n  },usePagination,useRowSelect,\r\n  hooks => {\r\n    hooks.visibleColumns.push(columns => [\r\n    \r\n      {\r\n        id: 'selection',\r\n        \r\n        Header: ({ getToggleAllPageRowsSelectedProps }) => (\r\n          <div>\r\n            Favourite\r\n          </div>\r\n        ),\r\n        \r\n        Cell: ({ row }) => (\r\n          <div>\r\n            <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n          </div>\r\n        ),\r\n      },\r\n      ...columns,\r\n    ])\r\n  });\r\n\r\n\r\n        \r\n \r\n  return (<>\r\n\r\n\r\n\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map((row, i) => {\r\n            prepareRow(row)\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                })}\r\n              </tr>\r\n            )\r\n          })}\r\n        </tbody>\r\n      </table>\r\n       {}\r\n      <div className=\"pagination\">\r\n        <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n          {'<<'}\r\n        </button>{' '}\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          {'<'}\r\n        </button>{' '}\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          {'>'}\r\n        </button>{' '}\r\n        <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n          {'>>'}\r\n        </button>{' '}\r\n        <span>\r\n          Page{' '}\r\n          <strong>\r\n            {pageIndex + 1} of {pageOptions.length}\r\n          </strong>{' '}\r\n        </span>\r\n        <span>\r\n          | Go to page:{' '}\r\n          <input\r\n            type=\"number\"\r\n            defaultValue={pageIndex + 1}\r\n            onChange={e => {\r\n              const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n              gotoPage(page)\r\n            }}\r\n            style={{ width: '100px' }}\r\n          />\r\n        </span>{' '}\r\n        <select\r\n          value={pageSize}\r\n          onChange={e => {\r\n            setPageSize(Number(e.target.value))\r\n          }}\r\n        >\r\n          {[10, 20, 30, 40, 50].map(pageSize => (\r\n            <option key={pageSize} value={pageSize}>\r\n              Show {pageSize}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n","import React, {useMemo, useState} from \"react\";\nimport axios from 'axios'\nimport Table from \"./Table\";\nimport useSWR from 'swr';\n\nimport './App.css';\n\nfunction App() {\n   \n    const [city, setCity] = useState(\"\");\n    const [a, setA] = useState('');\n\n    const changeCity = (event) => {\n        setCity(event.target.value);\n\n    };\n     const {data}=useSWR(  `https://vast-shore-74260.herokuapp.com/banks?city=${city}`,(url)=>axios(url).then(r=>r.data));\n    const columns = useMemo(() => [\n        {\n            Header: 'IFSC',\n            accessor: 'ifsc'\n        }, {\n            Header: 'Bank ID',\n            accessor: 'bank_id'\n        }, {\n            Header: 'Branch',\n            accessor: 'branch'\n        }, {\n            Header: 'Address',\n            accessor: 'address'\n        }, {\n            Header: 'City',\n            accessor: 'city'\n        }, {\n            Header: 'District',\n            accessor: 'district'\n        }, {\n            Header: 'State',\n            accessor: 'state'\n        }, {\n            Header: 'Bank Name',\n            accessor: 'bank_name'\n        }\n    ], [])\n\n   \n\n    function search(rows) {\n        return rows.filter(\n            (row) => row.ifsc.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.bank_id.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.branch.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.address.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.city.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.district.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.state.toString().toLowerCase().indexOf(a.toLowerCase()) > -1 || row.bank_name.toString().toLowerCase().indexOf(a.toLowerCase()) > -1\n        );\n    }\n\n   \n    \n\n    return (\n        <div className=\"App\">\n\n            <div className=\"heading\">\n                <h1>Bank Searching System</h1>\n            </div>\n            <div className=\"input__box\">\n                <label for=\"city\">Choose a City:\n                </label>\n\n                <select onChange={changeCity} name=\"city\" id=\"city\">\n                    <option value=\"\">Select City</option>\n                    <option value=\"MUMBAI\">MUMBAI</option>\n                    <option value=\"DELHI\">DELHI</option>\n                    <option value=\"KOLKATA\">KOLKATA</option>\n                    <option value=\"PUNE\">PUNE</option>\n                    <option value=\"HYDERABAD\">HYDERABAD</option>\n                </select>\n                <input\n                    className=\"input\"\n                    placeholder=\"Search Bank\"\n                    type='text'\n                    value={a}\n                    onChange={(e) => setA((e.target.value))}/>\n\n            </div>\n\n            <div className=\"table\">\n\n                <Table columns={columns} data={search(data||[])}></Table>\n                \n\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\nserviceWorkerRegistration.register();\n\n\n"],"sourceRoot":""}